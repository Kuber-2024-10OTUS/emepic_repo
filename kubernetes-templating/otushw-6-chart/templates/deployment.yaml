apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: webapp
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: {{ .Values.deployment.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: webapp
    spec:
      nodeSelector:
        homework: "true"
      initContainers:
      - name: init-container
        image: {{ .Values.deployment.initContainer.image }}:{{ .Values.deployment.initContainer.tag }}
        command:
        - wget
        - "-O"
        - "/init/index.html"
        - http://example.com
        volumeMounts:
        - name: intro-workdir
          mountPath: "/init"
      dnsPolicy: Default
      containers:
      - name: nginx-container 
        image: {{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: intro-workdir
          mountPath: /usr/share/nginx/html
        - name: conf-volume
          mountPath: /usr/share/nginx/html/conf
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","rm /homework/index.html"]
        readinessProbe:
          httpGet:
            path: /index.html
            port: 80
      volumes:
      - name: intro-workdir
        persistentVolumeClaim:
          claimName: {{ .Values.persistentVolumeClaim.name }}
      - name: conf-volume
        configMap:
          name: {{ .Values.configMap.name }}